<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/17/2024 6:03:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NIDHI-PC"
  DTS:CreatorName="NIDHI-PC\chnid"
  DTS:DTSID="{66A0314E-4C96-4899-814D-C67FC04D450A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5556.0"
  DTS:LocaleID="16393"
  DTS:ObjectName="CreateAllTablesAndSP"
  DTS:PackageType="5"
  DTS:VersionBuild="8"
  DTS:VersionGUID="{13432248-06EB-4CBE-9AF7-4F932A0CC0C1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create all Tables with certificates"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{98F7A4F1-77A1-4908-9855-BAAB67BCBC82}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create all Tables with certificates"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{DA07C08B-3CA8-4445-9403-EBC5B3165815}"
          SQLTask:SqlStatementSource="&#xA;--step 1: create master key encryption using master key function&#xA;-- Step 1: Open and drop the symmetric key&#xA;&#xA;OPEN SYMMETRIC KEY CreditCardKey&#xA;DECRYPTION BY CERTIFICATE CreditCardCert;&#xA;&#xA;CLOSE SYMMETRIC KEY CreditCardKey;&#xA;DROP SYMMETRIC KEY CreditCardKey;&#xA;-- Step 2: Drop the certificate&#xA;DROP CERTIFICATE CreditCardCert;&#xA;DROP MASTER KEY;&#xA;-- Step 3: Recreate the certificate and symmetric key&#xA;CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Password';&#xA;&#xA;CREATE CERTIFICATE CreditCardCert&#xA;WITH SUBJECT = 'Credit Card Encryption Certificate';&#xA;&#xA;CREATE SYMMETRIC KEY CreditCardKey&#xA;WITH ALGORITHM = AES_256&#xA;ENCRYPTION BY CERTIFICATE CreditCardCert;&#xA;&#xA;&#xA;DROP TABLE IF EXISTS [dbo].[SalesData_Encrypted];&#xA;DROP TABLE IF EXISTS [dbo].[Final_Sales_Data];&#xA;DROP TABLE IF EXISTS [dbo].[country_lookup];&#xA;&#xA;CREATE TABLE [dbo].[SalesData_Encrypted](&#xA;&#x9;[OrderID] [varchar](100) NULL,&#xA;&#x9;[CustomerName] [varchar](100) NULL,&#xA;&#x9;[PhoneNumber] [varchar](20) NULL,&#xA;&#x9;[Location] [varchar](100) NULL,&#xA;&#x9;[Country] [varchar](50) NULL,&#xA;&#x9;[StoreCode] [varchar](50) NULL,&#xA;&#x9;[Product] [varchar](100) NULL,&#xA;&#x9;[Quantity] [float] NULL,&#xA;&#x9;[Price] [float] NULL,&#xA;&#x9;[Date] [datetime] NULL,&#xA;&#x9;[EncryptedCreditCardNumber] [varbinary](256) NULL,&#xA;&#x9;[ExpiryDate] [varchar](10) NULL,&#xA;&#x9;[Ingestion_Date] [datetime] NULL,&#xA;&#x9;[ValidFlag] [varchar](10) NULL,&#xA;&#x9;[TotalSales] [float] NULL&#xA;);&#xA;&#xA;CREATE TABLE [dbo].[Final_Sales_Data](&#xA;&#x9;[orderID] [varchar](100) NULL,&#xA;&#x9;[CustomerName] [varchar](100) NULL,&#xA;&#x9;[PhoneNumber] [varchar](20) NULL,&#xA;&#x9;[Location] [varchar](100) NULL,&#xA;&#x9;[Country] [varchar](50) NULL,&#xA;&#x9;[StoreCode] [varchar](50) NULL,&#xA;&#x9;[Product] [varchar](100) NULL,&#xA;&#x9;[Quantity] [float] NULL,&#xA;&#x9;[Price] [float] NULL,&#xA;&#x9;[Date] [datetime] NULL,&#xA;&#x9;[EncryptedCreditCardNumber] [varbinary](256) NULL,&#xA;&#x9;[ExpiryDate] [varchar](10) NULL,&#xA;&#x9;[TotalSales] [float] NULL&#xA;)&#xA;&#xA;CREATE TABLE [dbo].[country_lookup](&#xA;&#x9;[Country] [varchar](100) NULL,&#xA;&#x9;[Location] [varchar](100) NULL&#xA;)&#xA;&#xA;INSERT INTO [dbo].[country_lookup] (Country, [Location])&#xA;VALUES ('USA','New York'),&#xA;('USA', 'Los Angeles'),&#xA;('USA','Houston'),&#xA;('USA','California'),&#xA;('USA','Chicago'),&#xA;('UK','London'),&#xA;('UK','Newcastle'),&#xA;('Australia','Sydney'),&#xA;('Australia','Canberra'),&#xA;('India','Mumbai'),&#xA;('India','New Delhi'),&#xA;('Canada','Toronto')&#xA;&#xA;&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Create Stored proc for loading data with encryption"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0893D2ED-0ED7-490C-B23A-621C2473FBAF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create Stored proc for loading data with encryption"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{DA07C08B-3CA8-4445-9403-EBC5B3165815}"
          SQLTask:SqlStatementSource="CREATE OR ALTER   PROCEDURE [dbo].[InsertSalesDataWithEncryptedCreditCard]&#xA;    @OrderID VARCHAR(50),&#xA;    @CustomerName VARCHAR(100),&#xA;    @PhoneNumber VARCHAR(20),&#xA;    @Location VARCHAR(100),&#xA;    @Country VARCHAR(50),&#xA;    @StoreCode VARCHAR(50),&#xA;    @Product VARCHAR(100),&#xA;    @Quantity FLOAT,&#xA;    @Price FLOAT,&#xA;    @Date DATETIME,&#xA;    @CreditCardNumber VARCHAR(50),&#xA;    @ExpiryDate VARCHAR(10)&#xA;AS&#xA;BEGIN&#xA;    -- Open the symmetric key&#xA;    OPEN SYMMETRIC KEY CreditCardKey&#xA;    DECRYPTION BY CERTIFICATE CreditCardCert;&#xA;&#xA;    -- Insert the data with the encrypted credit card number&#xA;    INSERT INTO dbo.SalesData_Encrypted (OrderID, CustomerName, PhoneNumber, Location, Country, &#xA;    StoreCode, Product, Quantity, Price, Date, EncryptedCreditCardNumber, ExpiryDate)&#xA;    VALUES (&#xA;        @OrderID,&#xA;        @CustomerName,&#xA;        @PhoneNumber,&#xA;        @Location,&#xA;        @Country,&#xA;        @StoreCode,&#xA;        @Product,&#xA;        @Quantity,&#xA;        @Price,&#xA;        @Date,&#xA;        ENCRYPTBYKEY(KEY_GUID('CreditCardKey'), @CreditCardNumber),&#xA;        @ExpiryDate&#xA;    );&#xA;&#xA;    -- Close the symmetric key&#xA;    CLOSE SYMMETRIC KEY CreditCardKey;&#xA;END;&#xA;&#xA;UPDATE dbo.SalesData_Encrypted  &#xA;SET Ingestion_Date = GETDATE()&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Create stored procedure for data transformation"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{298B88D1-5B99-482F-B012-F8F9EFE7DB6A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create stored procedure for data transformation"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{DA07C08B-3CA8-4445-9403-EBC5B3165815}"
          SQLTask:SqlStatementSource="CREATE OR ALTER PROCEDURE [dbo].[salesdata_transformation]&#xA;AS&#xA;&#xA;-- Null check/ Data Quality Check&#xA;UPDATE STG SET ValidFlag = -1&#xA;from [dbo].[SalesData_Encrypted] AS STG where OrderID IS NULL OR PhoneNumber IS NULL&#xA;&#xA;UPDATE STG SET ValidFlag = -1&#xA;from [dbo].[SalesData_Encrypted] AS STG where CustomerName IS NULL OR StoreCode IS NULL&#xA;&#xA;UPDATE STG SET ValidFlag = -1&#xA;from [dbo].[SalesData_Encrypted] AS STG where [Location] IS NULL OR [Country] IS NULL&#xA;&#xA;UPDATE STG SET ValidFlag = -1&#xA;from [dbo].[SalesData_Encrypted] AS STG where Product IS NULL&#xA;&#xA;update  STG SET Quantity = NULL&#xA;from [dbo].[SalesData_Encrypted] AS STG where Quantity = 0&#xA;&#xA;update  STG SET Price = NULL&#xA;from [dbo].[SalesData_Encrypted] AS STG where Price = 0&#xA;&#xA;update STG set ValidFlag = -1 from [dbo].[SalesData_Encrypted] as stg &#xA;where [Quantity] is not null and [Price] is null&#xA;&#xA;update STG set ValidFlag = -1 from [dbo].[SalesData_Encrypted] as stg &#xA;where [Price] is not null and [Quantity] is null &#xA;&#xA;update STG set ValidFlag = -1 from [dbo].[SalesData_Encrypted] as stg &#xA;where [Quantity] is  null and [Price] is null &#xA;&#xA;-- data type check&#xA;&#xA;UPDATE STG SET ValidFlag = -1 from [dbo].[SalesData_Encrypted] AS STG WHERE ISNUMERIC(Price) = 0&#xA;&#xA;UPDATE STG SET ValidFlag = -1 from [dbo].[SalesData_Encrypted] AS STG WHERE ISDATE(Date) = 0&#xA;&#xA;&#xA;-- Invalid/ Update Check -- Data Governance and integrity -- Enrichment -- Data Cleaning&#xA;--- Country Location Enrichment&#xA;update STG set STG.Country = LKP.Country &#xA;from [dbo].[SalesData_Encrypted] STG &#xA;JOIN [dbo].[country_lookup] LKP &#xA;ON STG.[Location] = LKP.[Location] &#xA;&#xA;--CustomerName enrichment&#xA;&#xA;UPDATE STG Set CustomerName  = LEFT(CustomerName, PATINDEX('%[0-9]%', CustomerName) - 1) &#xA;from [dbo].[SalesData_Encrypted] STG&#xA;where CustomerName LIKE '%[0-9]%'&#xA;&#xA;--Phone Number Enrichment&#xA;UPDATE STG &#xA;SET PhoneNumber =&#xA;case when country = 'USA' THEN concat('+1',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 ')))&#xA;WHEN Country = 'India' THEN concat('+91',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 '))) &#xA;WHEN Country = 'UK' THEN concat('+44',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 '))) &#xA;WHEN Country = 'Australia' THEN concat('+61',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 '))) &#xA;WHEN Country = 'UK' THEN concat('+44',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 '))) &#xA;WHEN Country = 'Canada' THEN concat('+1',SUBSTRING(PhoneNumber, LEN('+1 ') + 1, LEN(PhoneNumber) - LEN('+1 '))) &#xA;END&#xA;from [dbo].[SalesData_Encrypted] STG&#xA;&#xA;-- duplicate check&#xA;&#xA;-- select orderId, count(*) as countOfDuplicate from [dbo].[SalesData_Encrypted]&#xA;-- where ValidFlag IS NULL&#xA;--  group by OrderID HAVING Count(*) &gt; 1&#xA;&#xA;-- ;with cte as&#xA;--  (select *, ROW_NUMBER() OVER(PARTITION BY OrderID order by Quantity) rn from [dbo].[SalesData_Encrypted])&#xA;&#xA;-- update cte set ValidFlag = -1 where rn &gt; 1&#xA;&#xA;-- Data Cleaning&#xA;-- updating qty to rounded off value for deeper data analysis&#xA;&#xA;update STG SET Quantity = ROUND(Quantity,0)&#xA;from [dbo].[SalesData_Encrypted] as STG &#xA;where Quantity != CAST(Quantity AS INT);&#xA;&#xA;-- Total Sales per OrderID&#xA;update [dbo].[SalesData_Encrypted] set TotalSales = Quantity * Price where ValidFlag IS NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{66E2CE1C-B266-41D6-8B9E-E62C3CE424B5}"
      DTS:From="Package\Create all Tables with certificates"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Create Stored proc for loading data with encryption" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{92041E29-3B6A-4441-B215-634222B94F39}"
      DTS:From="Package\Create Stored proc for loading data with encryption"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Create stored procedure for data transformation" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="236,42.6666666666667"
          Id="Package\Create all Tables with certificates"
          TopLeft="129.874994440004,118.394735602543" />
        <NodeLayout
          Size="320,42.6666666666667"
          Id="Package\Create Stored proc for loading data with encryption"
          TopLeft="91.7499974854293,229.815787340135" />
        <NodeLayout
          Size="305.333333333334,42.6666666666667"
          Id="Package\Create stored procedure for data transformation"
          TopLeft="94.249998714775,338.499997002514" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="249.812495962717,161.06140226921">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,68.7543850709252"
              Start="0,0"
              End="0,61.2543850709252">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,61.2543850709252" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="249.333331433435,272.482454006802">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,66.0175429957119"
              Start="0,0"
              End="0,58.5175429957119">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,58.5175429957119" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>